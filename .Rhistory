my.main = "Allocchi permutation t-test: Cold vs Hot",
my.position = "topright")
tt_gufi_hot_temperate = MyTperm(gufi_temperate, gufi_hot,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gufi,
my.bty = "n",
my.main = "Allocchi permutation t-test: Temperate vs Hot",
my.position = "topright")
par(mfrow = c(1, 1))
dev.off()
png("results/prima_parte/images/t_test_gabbiani.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 2))
tt_gabbiani_Atlantic_Canary = MyTperm(gabbiani_Atlantic, gabbiani_Canary,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Atlantic vs Canary",
my.position = "topright")
tt_gabbiani_Atlantic_Centre = MyTperm(gabbiani_Atlantic, gabbiani_Centre,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Centret",
my.position = "topright")
tt_gabbiani_Atlantic_Mediterrean = MyTperm(gabbiani_Atlantic, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Mediterrean",
my.position = "topright")
tt_gabbiani_Canary_Centre = MyTperm(gabbiani_Canary, gabbiani_Centre,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Canary vs Centre",
my.position = "topright")
tt_gabbiani_Canary_Mediterrean = MyTperm(gabbiani_Canary, gabbiani_Mediterrean,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Canary vs Mediterrean",
my.position = "topright")
tt_gabbiani_Centre_Mediterrean = MyTperm(gabbiani_Centre, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Centre vs Mediterrean",
my.position = "topright")
par(mfrow = c(1, 1))
dev.off()
alpha_correct_gabbiani =  round(alpha / n_test, 3)
alpha_correct_gabbiani
alpha = 0.05
l = length(unique(gabbiani$Cluster))
n_test = factorial(l) / (factorial(l - 2) * factorial(2))
alpha_correct_gabbiani =  round(alpha / n_test, 3)
gabbiani_Atlantic = gabbiani_meanspec_fd_con_diff
gabbiani_Atlantic$coefs = gabbiani_Atlantic$coefs[,which(gabbiani$Cluster == "Atlantic")]
gabbiani_Canary = gabbiani_meanspec_fd_con_diff
gabbiani_Canary$coefs = gabbiani_Canary$coefs[,which(gabbiani$Cluster == "Canary")]
gabbiani_Centre = gabbiani_meanspec_fd_con_diff
gabbiani_Centre$coefs = gabbiani_Centre$coefs[,which(gabbiani$Cluster == "Centre")]
gabbiani_Mediterrean = gabbiani_meanspec_fd_con_diff
gabbiani_Mediterrean$coefs = gabbiani_Mediterrean$coefs[,which(gabbiani$Cluster == "Mediterrean")]
png("results/prima_parte/images/t_test_gabbiani.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 2))
tt_gabbiani_Atlantic_Canary = MyTperm(gabbiani_Atlantic, gabbiani_Canary,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Atlantic vs Canary",
my.position = "topright")
tt_gabbiani_Atlantic_Centre = MyTperm(gabbiani_Atlantic, gabbiani_Centre,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Centret",
my.position = "topright")
tt_gabbiani_Atlantic_Mediterrean = MyTperm(gabbiani_Atlantic, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Mediterrean",
my.position = "topright")
tt_gabbiani_Canary_Centre = MyTperm(gabbiani_Canary, gabbiani_Centre,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Canary vs Centre",
my.position = "topright")
tt_gabbiani_Canary_Mediterrean = MyTperm(gabbiani_Canary, gabbiani_Mediterrean,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Canary vs Mediterrean",
my.position = "topright")
tt_gabbiani_Centre_Mediterrean = MyTperm(gabbiani_Centre, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Centre vs Mediterrean",
my.position = "topright")
par(mfrow = c(1, 1))
dev.off()
install.packages("kable")
save.image(file = "results/prima_parte/outputs/final_work_space.RData")
# DON'T LOAD if you want to run from the next line
load("results/prima_parte/outputs/final_work_space.RData")
# DON'T LOAD if you want to run from the next line
load("results/prima_parte/outputs/final_work_space.RData")
png("results/prima_parte/images/t_test_gabbiani.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 2))
tt_gabbiani_Atlantic_Canary = MyTperm(gabbiani_Atlantic, gabbiani_Canary,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Atlantic vs Canary",
my.position = "topright")
library(fda)
png("results/prima_parte/images/t_test_gabbiani.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 2))
tt_gabbiani_Atlantic_Canary = MyTperm(gabbiani_Atlantic, gabbiani_Canary,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Atlantic vs Canary",
my.position = "topright")
tt_gabbiani_Atlantic_Centre = MyTperm(gabbiani_Atlantic, gabbiani_Centre,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Centret",
my.position = "topright")
tt_gabbiani_Atlantic_Mediterrean = MyTperm(gabbiani_Atlantic, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Mediterrean",
my.position = "topright")
tt_gabbiani_Canary_Centre = MyTperm(gabbiani_Canary, gabbiani_Centre,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Canary vs Centre",
my.position = "topright")
tt_gabbiani_Canary_Mediterrean = MyTperm(gabbiani_Canary, gabbiani_Mediterrean,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Canary vs Mediterrean",
my.position = "topright")
tt_gabbiani_Centre_Mediterrean = MyTperm(gabbiani_Centre, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Centre vs Mediterrean",
my.position = "topright")
par(mfrow = c(1, 1))
dev.off()
png("results/prima_parte/images/t_test_gabbiani.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 2))
tt_gabbiani_Atlantic_Canary = MyTperm(gabbiani_Atlantic, gabbiani_Canary,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Atlantic vs Canary",
my.position = "topright")
tt_gabbiani_Atlantic_Centre = MyTperm(gabbiani_Atlantic, gabbiani_Centre,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Centre",
my.position = "topright")
tt_gabbiani_Atlantic_Mediterrean = MyTperm(gabbiani_Atlantic, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Mediterrean",
my.position = "topright")
tt_gabbiani_Canary_Centre = MyTperm(gabbiani_Canary, gabbiani_Centre,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Canary vs Centre",
my.position = "topright")
tt_gabbiani_Canary_Mediterrean = MyTperm(gabbiani_Canary, gabbiani_Mediterrean,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Canary vs Mediterrean",
my.position = "topright")
tt_gabbiani_Centre_Mediterrean = MyTperm(gabbiani_Centre, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Centre vs Mediterrean",
my.position = "topright")
par(mfrow = c(1, 1))
dev.off()
alpha_correct_gabbiani
MyTperm <- function (x1fd, x2fd, nperm = 200, q = 0.05, argvals = NULL,
plotres = TRUE,
my.bty = "n",
my.position = "topright",
my.main = "",
...)
{
if (!is.fd(x1fd) | !is.fd(x2fd)) {
stop("x1fd and x2fd must both be functional data objects")
}
rangeobs = x1fd$basis$range
rangehat = x2fd$basis$range
if (!prod(rangeobs == rangehat)) {
stop("x1fd and x2fd do not have the same range.")
}
if (is.null(argvals)) {
argvals = seq(rangeobs[1], rangeobs[2], length.out = 101)
}
q = 1 - q
x1mat = eval.fd(argvals, x1fd)
x2mat = eval.fd(argvals, x2fd)
n1 = ncol(x1mat)
n2 = ncol(x2mat)
Xmat = cbind(x1mat, x2mat)
Tnull = rep(0, nperm)
Tnullvals = matrix(0, length(argvals), nperm)
for (i in 1:nperm) {
tXmat = Xmat[, sample(n1 + n2)]
tmean1 = apply(tXmat[, 1:n1], 1, mean)
tmean2 = apply(tXmat[, n1 + (1:n2)], 1, mean)
tvar1 = apply(tXmat[, 1:n1], 1, var)/n1
tvar2 = apply(tXmat[, n1 + (1:n2)], 1, var)/n2
Tnullvals[, i] = abs(tmean1 - tmean2)/sqrt(tvar1 + tvar2)
Tnull[i] = max(Tnullvals[, i])
}
mean1 = apply(Xmat[, 1:n1], 1, mean)
mean2 = apply(Xmat[, n1 + (1:n2)], 1, mean)
var1 = apply(Xmat[, 1:n1], 1, var)/n1
var2 = apply(Xmat[, n1 + (1:n2)], 1, var)/n2
Tvals = abs(mean1 - mean2)/sqrt(var1 + var2)
Tobs = max(Tvals)
pval = mean(Tobs < Tnull)
qval = quantile(Tnull, q)
pvals.pts = apply(Tvals < Tnullvals, 1, mean)
qvals.pts = apply(Tnullvals, 1, quantile, q)
if (plotres) {
if (is.null(names(x1fd$fdnames)) | is.null(names(x2fd$fdnames))) {
xlab = "argvals"
}
else if (prod(names(x1fd$fdnames)[1] == names(x2fd$fdnames)[1])) {
xlab = names(x1fd$fdnames)[1]
}
else {
xlab = "argvals"
}
ylims = c(min(Tvals, qvals.pts), max(Tobs, qval))
plot(argvals, Tvals, type = "l", col = 2, ylim = ylims,
lwd = 2, xlab = xlab, ylab = "t-statistic",
main = my.main, ...)
lines(argvals, qvals.pts, lty = 3, col = 4, lwd = 2)
abline(h = qval, lty = 2, col = 4, lwd = 2)
legendstr = c("Observed Statistic", paste("pointwise",
round(1 - q, 3), "critical value"), paste("maximum",round(1 - q, 3),
"critical value"))
legend(my.position, ylims[2], legend = legendstr, col = c(2,
4, 4),
lty = c(1, 3, 2), lwd = c(2, 2, 2),
bty = my.bty)
legend("bottomright", legend = paste0("Permutation Number: ",
nperm, collapse = ""),
bty = "n")
}
return(list(pval = pval, qval = qval, Tobs = Tobs, Tnull = Tnull,
Tvals = Tvals, Tnullvals = Tnullvals, qvals.pts = qvals.pts,
pvals.pts = pvals.pts, argvals = argvals))
}
png("results/prima_parte/images/t_test_gufi.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 1))
tt_gufi_temperate_cold = MyTperm(gufi_cold, gufi_temperate,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gufi,
my.main = "Allocchi permutation t-test: Cold vs Temperate",
my.position = "topright")
tt_gufi_hot_cold = MyTperm(gufi_cold, gufi_hot,
nperm = N_PERM,
q = alpha_correct_gufi,
my.bty = "n",
my.main = "Allocchi permutation t-test: Cold vs Hot",
my.position = "topright")
tt_gufi_hot_temperate = MyTperm(gufi_temperate, gufi_hot,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gufi,
my.bty = "n",
my.main = "Allocchi permutation t-test: Temperate vs Hot",
my.position = "topright")
par(mfrow = c(1, 1))
dev.off()
png("results/prima_parte/images/t_test_gabbiani.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 2))
tt_gabbiani_Atlantic_Canary = MyTperm(gabbiani_Atlantic, gabbiani_Canary,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Atlantic vs Canary",
my.position = "topright")
tt_gabbiani_Atlantic_Centre = MyTperm(gabbiani_Atlantic, gabbiani_Centre,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Centre",
my.position = "topright")
tt_gabbiani_Atlantic_Mediterrean = MyTperm(gabbiani_Atlantic, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Atlantic vs Mediterrean",
my.position = "topright")
tt_gabbiani_Canary_Centre = MyTperm(gabbiani_Canary, gabbiani_Centre,
nperm = N_PERM,
my.bty = "n",
q = alpha_correct_gabbiani,
my.main = "Gabbiani permutation t-test: Canary vs Centre",
my.position = "topright")
tt_gabbiani_Canary_Mediterrean = MyTperm(gabbiani_Canary, gabbiani_Mediterrean,
nperm = N_PERM,
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Canary vs Mediterrean",
my.position = "topright")
tt_gabbiani_Centre_Mediterrean = MyTperm(gabbiani_Centre, gabbiani_Mediterrean,
nperm = N_PERM,
bty = "n",
q = alpha_correct_gabbiani,
my.bty = "n",
my.main = "Gabbiani permutation t-test: Centre vs Mediterrean",
my.position = "topright")
par(mfrow = c(1, 1))
dev.off()
?tperm.fd
alpha_correct_gufi
1 - alpha_correct_gufi
png("results/prima_parte/images/f_anova_f_test.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 1))
# falchi
plot(
falchi_meanspec_freqs,
perm_fanova_res_falchi$fobs,
ylim = range(c(perm_fanova_res_falchi$fobs,perm_fanova_res_falchi$qFmax)),
type = 'l',
lwd = 2,
main = paste0("Ftest Gheppi", "; permutation number = ", N_PERM),
xlab = "Frequency",
ylab = "F"
)
lines(falchi_meanspec_freqs, perm_fanova_res_falchi$qF,
lty = 3, lwd = 2)
abline(h = perm_fanova_res_falchi$qFmax, lwd = 2, col = 2)
# gufi
plot(
gufi_meanspec_freqs,
perm_fanova_res_gufi$fobs,
ylim = range(c(perm_fanova_res_gufi$fobs,perm_fanova_res_gufi$qFmax)),
type = 'l',
lwd = 2,
main = paste0("Ftest Allocchi", "; permutation number = ", N_PERM),
xlab = "Frequency",
ylab = "F"
)
lines(gufi_meanspec_freqs, perm_fanova_res_gufi$qF,
lty = 3, lwd = 2)
abline(h = perm_fanova_res_gufi$qFmax, lwd = 2, col = 2)
# gabbiani
plot(
gabbiani_meanspec_freqs,
perm_fanova_res_gabbiani$fobs,
type = 'l',
lwd = 2,
ylim = range(c(perm_fanova_res_gabbiani$fobs,perm_fanova_res_gabbiani$qFmax)),
main = paste0("Ftest Gabbiani", "; permutation number = ", N_PERM),
xlab = "Frequency",
ylab = "F"
)
lines(gabbiani_meanspec_freqs, perm_fanova_res_gabbiani$qF,
lty = 3, lwd = 2)
abline(h = perm_fanova_res_gabbiani$qFmax, lwd = 2, col = 2)
dev.off()
par(mfrow = c(1, 1))
library(urca)
setwd("C:/Users/pietr/OneDrive - Università degli Studi di Padova/UNI/Corsi/Magistrale/Secondo Anno/Primo semestre/Modelli statistici per dati economici/Lab/Laboratorio 3_COINT-20250528")
pacf(lres, main = "Residui OLS")
par(mfrow = c(1, 1))
VARselect(data)
#' Il comando ?urca::ca.jo ci consente di effettuare il test sulla traccia
#' ponendo type = "trace". Utilizzando la funzione ?urca::ca.jo K deve essere > 1.
?urca::ca.jo
vecm <- ca.jo(data, K = 2, type = "trace")
summary(vecm)
setwd("C:/Users/pietr/OneDrive - Università degli Studi di Padova/UNI/Corsi/Magistrale/Secondo Anno/Primo semestre/Modelli statistici per dati economici/Lab/Laboratorio 3_COINT-20250528")
library(urca)
library(dynlm)
library(vars)
# Prezzo oro e argento ----
data <- read.csv("comodity_price.csv")
head(data)
data <- ts(data[, c(2:3)], start = c(1993, 11), frequency = 12)
end(data)
par(mfcol = c(1, 2))
plot(data[, 1], main = "gold")
plot(data[, 2], main = "silver")
par(mfcol = c(1, 1))
par(mfcol = c(2, 2))
acf(data[, 1], main = "gold")
pacf(data[, 1], main = "gold")
acf(data[, 2], main = "silver")
pacf(data[, 2], main = "silver")
par(mfcol = c(1, 1))
# Integration ----
# Test ADF con trend
#' (y[t]-y[t-1]) = alpha + gamma t + delta y[t-1]  +
#'                    beta[1] (y[t-1]-y[t-2]) + beta[2] (y[t-2]-y[t-3]) + ... + eps[t]
#' tau3: delta = 0
#' phi2: alpha = delta = gamma = 0
#' phi3: delta = gamma = 0
silver_UR1 <- ur.df(data[,"silver"], type="trend", lags=12, selectlags = "BIC")
summary(silver_UR1)
#' tau2: delta = 0
#' phi1: alpha = delta = 0
silver_UR2 <- ur.df(data[,"silver"], type="drift", lags=12, selectlags = "BIC")
summary(silver_UR2)
silver_UR3 <- ur.df(data[,"silver"], type="none", lags=12, selectlags = "BIC")
summary(silver_UR3)
# Integration ----
# Test ADF con trend
#' (y[t]-y[t-1]) = alpha + gamma t + delta y[t-1]  +
#'                    beta[1] (y[t-1]-y[t-2]) + beta[2] (y[t-2]-y[t-3]) + ... + eps[t]
#' tau3: delta = 0
#' phi2: alpha = delta = gamma = 0
#' phi3: delta = gamma = 0
silver_UR1 <- ur.df(data[,"silver"], type="trend", lags=12, selectlags = "BIC")
summary(silver_UR1)
gold_UR <- ur.df(data[,"gold"], type="trend", lags=12, selectlags = "BIC")
summary(gold_UR)
#' Per controllo possiamo andare a considerare le differenze prime e mi aspetto di rifiutare
#' sempre l'ipotesi tau
diff_data <- diff(data)
plot(diff_data)
summary(ur.df(diff_data[,"silver"], lags=0, type="none"))
summary(ur.df(diff_data[,"gold"], lags=0, type="none"))
summary(ur.df(Italy, type="trend", lags=4, selectlags = "BIC"))
setwd("C:/Users/pietr/OneDrive - Università degli Studi di Padova/UNI/Corsi/Magistrale/Secondo Anno/Primo semestre/Modelli statistici per dati economici/Lab/Laboratorio 3_COINT-20250528")
library(forecast)
library(vars)
library(dynlm)
#> Nel file Consumi.csv sono raccolti i dati trimestrali sui consumi energetici per 27
#> paesi dell’unione europea a partire dal primo trimestre del 1995 (1995-Q1). Il file csv
#> contiene 104 righe e 28 colonne: la prima riga contiene l’intestazione di ciascuna colonna
#> e la prima colonna le date in formato trimestrale (ad esempio “2019-Q1”). Considerando solo
#> Italia (Italy), Francia (France), Germania (Germany) e Spagna (Spain), suddividi i dati in
#> due dataset: train con i valori osservati prima del 2018 (escluso), mentre test i valori
#> osservati dal 2018. Per i restanti quesiti utilizza solo il dataset train se non
#> richiesto diversamente.
data <- read.csv("CONSUMI.csv") # Carichiamo i dati
# Selezioniamo i quattro stati
data <- ts(data[, c("Italy", "France", "Germany", "Spain")],
start = c(1995, 1), frequency = 4)
train <- window(data, end = c(2017, 4))
test <- window(data, start = c(2018, 1))
Italy <- train[, "Italy"]
France <- train[, "France"]
Germany <- train[, "Germany"]
Spain <- train[, "Spain"]
#> 1.
#> Fare una breve analisi descrittiva delle serie storiche (grafico, ACF, PACF, . . . ). Commentare.
par(mfrow = c(2, 2))
plot(Italy)
plot(France)
plot(Germany)
plot(Spain)
par(mfrow = c(1, 1))
# Grafico ACF
par(mfrow = c(2,2))
for(i in 1:NCOL(data)){
acf(data[, i], main = colnames(data)[i])
}
par(mfrow = c(1,1))
# Grafico PACF
par(mfrow = c(2,2))
for(i in 1:NCOL(data)){
pacf(data[, i], main = colnames(data)[i])
}
par(mfrow = c(1,1))
summary(ur.df(Italy, type="trend", lags=4, selectlags = "BIC"))
