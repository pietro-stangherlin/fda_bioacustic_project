}
# Apply to all waveforms
normalized_matrix <- sapply(audio_segments_refin[[1]][[1]]$segments, normalize_time)
dim(normalized_matrix)
for (sample_id in 1:length(audio_segments_refin)){
if(length(audio_segments_refin[[sample_id]]) > 0){
for(i in 1:length(audio_segments_refin[[sample_id]])){
audio_segments_refin[[sample_id]][[i]]$norm_matrix = t(sapply(audio_segments_refin[[sample_id]][[i]]$segments,
normalize_time))
}
}
}
plot(audio_segments_refin[[1]][[1]]$norm_matrix[2,], type = "l")
temp_matr_1 <- audio_segments_refin[[1]][[1]]$norm_matrix
# concatenated super matrix
temp_matr_Y = temp_matr_1[-1,]
temp_matr_X = temp_matr_1[-NROW(temp_matr_1),]
# initialize
for(i in 2:length(audio_segments_refin[[1]])){
temp_matr = audio_segments_refin[[1]][[i]]$norm_matrix
temp_matr_Y = rbind(temp_matr_Y, temp_matr[-1,])
temp_matr_X = rbind(temp_matr_X, temp_matr[-NROW(temp_matr),])
}
# populate
for (sample_id in 2:length(audio_segments_refin)){
print("sample_id")
print(sample_id)
if(length(audio_segments_refin[[sample_id]]) > 0){
for(i in 1:length(audio_segments_refin[[sample_id]])){
if(length(audio_segments_refin[[sample_id]][[i]]) > 1){
print("i")
print(i)
temp_matr = audio_segments_refin[[sample_id]][[i]]$norm_matrix
print(dim(temp_matr))
temp_matr_Y = rbind(temp_matr_Y, temp_matr[-1,])
temp_matr_X = rbind(temp_matr_X, temp_matr[-NROW(temp_matr),])
}
}
}
}
# just to have the correct data structure
# to subscribe
data1 <- pffrSim(scenario = "ff", n = NROW(temp_matr_Y),
nxgrid = n_points, nygrid = n_points)
data1$Y = temp_matr_Y
data1$X1 = temp_matr_X
dim(temp_matr_Y)
# REML
fit = pffr(Y ~ ff(X1, xind = t_common,,
basistype = "te",
splinepars = list(bs="ps",
m = list(c(2, 1),c(2,1)),
k = 10)),
yind = t_common,
data = data1,
bs.yindex = list(bs = "ps", k = 10, m = c(2, 1)),
bs.int =  list(bs="ps", k = 10, m = c(2, 1)),
method = "REML")
plot(fit, scale = 0, scheme = 3, select = 1)
plot(fit, scale = 0, scheme = 3, select = 2)
plot(fit, scale = 0, scheme = 3, select = 2, shade = T)
fit_summary = summary(fit)
fit$coefficients
# Bande di confidenza simultanee ------------------
residuals <- residuals(fit, type = "response")
dim(residuals)
plot(seq(0,1, length = 100),
residuals[1,],
pch = 16,
ylim = c(-1,1),
xlab = "Time", ylab = "Residual")
for(i in 2:NROW(residuals)){
points(seq(0,1, length = 100), residuals[i,],
pch = 16)
}
res_mean <- colMeans(residuals)
res_sd <- apply(residuals, 2, sd)
plot(seq(0,1, length = 100), res_mean, type = "l", ylim = c(-1,1),
xlab = "Time", ylab = "Mean Residual", main = "Mean ± 2SD Residuals")
lines(seq(0,1, length = 100), res_mean + 2 * res_sd, col = "red", lty = 2)
lines(seq(0,1, length = 100), res_mean - 2 * res_sd, col = "red", lty = 2)
abline(h = 0, col = "gray")
fitted_vals <- fitted(fit)
plot(fitted_vals)
fit_coef <- coef(fit)
str(fit_coef$smterms$`ff(X1,t_common,`)
str(fit_coef$smterms$`Intercept(t_common`)
plot(fit_coef$smterms$`ff(X1,t_common,t_common`)
refund:::coef.pffr
fit_coef$smterms$`ff(X1,t_common,t_common`$coef$L.X1
pffr.check(fit)
length(audio_segments_refin[[i]][[j]])
i
i = length(audio_segments_refin)
j = length(audio_segments[[i]])
length(audio_segments_refin[[i]][[j]])
i
j
i = 3
j = 1
k = 1
length(falchi_meanspec_freqs)
setwd("C:/Users/pietr/OneDrive - Università degli Studi di Padova/UNI/Corsi/Magistrale/Secondo Anno/Secondo semestre/Dati Funzionali/project/Birds")
load("../results/prima_parte/outputs/final_work_space.RData")
load("results/prima_parte/outputs/final_work_space.RData")
falchi_meanspec_amps
length(falchi_meanspec_freqs)
manual_basis_pars_df
representation_selection_df
representation_selection_df = data.frame("animal" = c(rep("falchi", 4), rep("gufi", 4), rep("gabbiani", 4)),
"constraint" = rep(c(FALSE, FALSE, TRUE, TRUE), 3) ,
"penalty type" = rep(c("INT", "DIFF", "INT", "DIFF"), 3) ,
"min error parameter" = c(falchi_nbasis_gcv$best_n_basis,
falchi_LD_gcv$best_lambda,
falchi_loocv_pen_int$basis_min,
falchi_loocv_pen_diff$lambda_min,
gufi_nbasis_gcv$best_n_basis,
gufi_LD_gcv$best_lambda,
gufi_loocv_pen_int$basis_min,
gufi_loocv_pen_diff$lambda_min,
gabbiani_nbasis_gcv$best_n_basis,
gabbiani_LD_gcv$best_lambda,
gabbiani_loocv_pen_int$basis_min,
gabbiani_loocv_pen_diff$lambda_min),
"domain unique points" = c(rep(nrow(falchi_meanspec_amps), 4),
rep(nrow(gufi_meanspec_amps), 4),
rep(nrow(gabbiani_meanspec_amps), 4)))
representation_selection_df
save(representation_selection_df,
file = "results/prima_parte/outputs/representation_selection_df.RData")
save.image(file = "results/prima_parte/outputs/final_work_space.RData")
representation_selection_df = data.frame("animal" = c(rep("gheppi", 4), rep("allocchi", 4), rep("gabbiani", 4)),
"constraint" = rep(c(FALSE, FALSE, TRUE, TRUE), 3) ,
"penalty type" = rep(c("INT", "DIFF", "INT", "DIFF"), 3) ,
"min error parameter" = c(falchi_nbasis_gcv$best_n_basis,
falchi_LD_gcv$best_lambda,
falchi_loocv_pen_int$basis_min,
falchi_loocv_pen_diff$lambda_min,
gufi_nbasis_gcv$best_n_basis,
gufi_LD_gcv$best_lambda,
gufi_loocv_pen_int$basis_min,
gufi_loocv_pen_diff$lambda_min,
gabbiani_nbasis_gcv$best_n_basis,
gabbiani_LD_gcv$best_lambda,
gabbiani_loocv_pen_int$basis_min,
gabbiani_loocv_pen_diff$lambda_min),
"domain unique points" = c(rep(nrow(falchi_meanspec_amps), 4),
rep(nrow(gufi_meanspec_amps), 4),
rep(nrow(gabbiani_meanspec_amps), 4)))
representation_selection_df
save(representation_selection_df,
file = "results/prima_parte/outputs/representation_selection_df.RData")
png("results/prima_parte/images/falchi_fits_crit.png",
width = MY.WIDTH, height = MY.HEIGHT)
# compare fitting
par(mfrow = c(2, 2))
plot(falchi_meanspec_fd_int, main = paste0("Gheppi GCV Int - nbasis: ",
falchi_meanspec_fd_int$basis$nbasis, collapse = "")) # border problem
plot(falchi_meanspec_fd_diff, main = paste0("Gheppi GCV Diff - log(lambda): ",
round(log(falchi_LD_gcv$best_lambda, base = 10),2), collapse = "")) # choose this one
plot(falchi_meanspec_fd_con_int,
main = paste0("Gheppi Constraint LOOCV Int - nbasis: ",
falchi_loocv_pen_int$basis_min, collapse = ""))
plot(falchi_meanspec_fd_con_diff,
main = paste0("Gheppi Constraint LOOCV Diff - log(lambda): ",
round(log(falchi_loocv_pen_diff$lambda_min, base = 10),2), collapse = ""))
par(mfrow = c(1,1))
dev.off()
png("results/prima_parte/images/gufi_fits_crit.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(2, 2))
plot(gufi_meanspec_fd_int, main = paste0("Allocchi GCV Int - nbasis: ",
gufi_meanspec_fd_int$basis$nbasis, collapse = "")) # border problem
plot(gufi_meanspec_fd_diff, main = paste0("Allocchi GCV Diff - log(lambda): ",
round(log(gufi_LD_gcv$best_lambda, base = 10),2), collapse = "")) # choose this one
plot(gufi_meanspec_fd_con_int,
main = paste0("Allocchi Constraint LOOCV Int - nbasis: ",
gufi_loocv_pen_int$basis_min, collapse = ""))
plot(gufi_meanspec_fd_con_diff,
main = paste0("Allocchi Constraint LOOCV Diff - log(lambda): ",
round(log(gufi_loocv_pen_diff$lambda_min, base = 10),2), collapse = ""))
par(mfrow = c(1,1))
dev.off()
png("results/prima_parte/images/gabbiani_fits_crit.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(2, 2))
plot(gabbiani_meanspec_fd_int, main = paste0("Gabbiani GCV Int - nbasis: ",
gabbiani_meanspec_fd_int$basis$nbasis, collapse = "")) # border problem
plot(gabbiani_meanspec_fd_diff, main = paste0("Gabbiani GCV Diff - log(lambda): ",
round(log(gabbiani_LD_gcv$best_lambda, base = 10),2), collapse = "")) # choose this one
plot(gabbiani_meanspec_fd_con_int,
main = paste0("Gabbiani Constraint LOOCV Int - nbasis: ",
gabbiani_loocv_pen_int$basis_min, collapse = ""))
plot(gabbiani_meanspec_fd_con_diff,
main = paste0("Gabbiani Constraint LOOCV Diff - log(lambda): ",
round(log(gabbiani_loocv_pen_diff$lambda_min, base = 10),2), collapse = ""))
par(mfrow = c(1,1))
dev.off()
manual_basis_pars_df = data.frame("species" = c("gheppi", "allocchi", "gabbiani"),
"basis_num" = rep(CHOSEN_BASIS_NUMBER, 3),
"lambda" = c(falchi_chosen_loocv_pen_diff$lambda_min,
gufi_chosen_loocv_pen_diff$lambda_min,
gabbiani_chosen_loocv_pen_diff$lambda_min))
save(manual_basis_pars_df,
file = "results/prima_parte/outputs/manual_basis_pars_df.RData")
png("results/prima_parte/images/manual_basis_selection.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 1))
plot(falchi_meanspec_fd_con_diff,
main = paste0("Gheppi Constraint Manual; ",
"; nbasis = ",  manual_basis_pars_df[manual_basis_pars_df$species == "falchi","basis_num"],
"; log-lambda =",
round(log(manual_basis_pars_df[manual_basis_pars_df$species == "falchi","lambda"], base = 10),2), collapse = ""))
plot(gufi_meanspec_fd_con_diff,
main = paste0("Allocchi Constraint Manual; ",
"; nbasis = ", manual_basis_pars_df[manual_basis_pars_df$species == "gufi","basis_num"],
"; log-lambda =",
round(log(manual_basis_pars_df[manual_basis_pars_df$species == "gufi","lambda"], base = 10),2), collapse = ""))
plot(gabbiani_meanspec_fd_con_diff,
main = paste0("Gabbiani Constraint Manual; ",
"; nbasis = ", manual_basis_pars_df[manual_basis_pars_df$species == "gufi","basis_num"],
"; log-lambda =",
round(log(manual_basis_pars_df[manual_basis_pars_df$species == "gabbiani","lambda"], base = 10),2), collapse = ""))
par(mfrow = c(1, 1))
dev.off()
# .. Save image ----------------------------
gc()
save.image(file = "results/prima_parte/outputs/basis_selection_work_space.RData")
png("results/prima_parte/images/f_mean_sd.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3,1))
FunctionalMeanBandPlot(fd_means = falchi_meanspec_fd_mean,
fd_sds = falchi_meanspec_fd_sd,
my.main = "Medie Funzionali ± Sd Gheppi",
my.ylim = c(0,0.8),
my.lwd = 2,
my.xlab = "Frequenza",
my.ylab = "Ampiezza",
my.levels.variable = falchi$Climate_zone,
save_path = NULL,
my.width = 600,
my.height = 350)
FunctionalMeanBandPlot(fd_means = gufi_meanspec_fd_mean,
fd_sds = gufi_meanspec_fd_sd,
my.main = "Medie Funzionali ± Sd Allocchi",
my.ylim = c(0,1),
my.lwd = 2,
my.xlab = "Frequenza",
my.ylab = "Ampiezza",
my.levels.variable = gufi$Climate_zone,
save_path = NULL,
my.width = 600,
my.height = 350)
FunctionalMeanBandPlot(fd_means = gabbiani_meanspec_fd_mean,
fd_sds = gabbiani_meanspec_fd_sd,
my.main = "Medie Funzionali ± Sd Gabbiani",
my.ylim = c(0,1),
my.lwd = 2,
my.xlab = "Frequenza",
my.ylab = "Ampiezza",
my.levels.variable = gabbiani$Cluster,
save_path = NULL,
my.width = 600,
my.height = 350)
par(mfrow = c(1,1))
dev.off()
# 10 components
falchi_pcf = pca.fd(falchi_meanspec_fd, nharm = 10)
gufi_pcf = pca.fd(gufi_meanspec_fd, nharm = 10)
gabbiani_pcf = pca.fd(gabbiani_meanspec_fd, nharm = 10)
png("results/prima_parte/images/f_pca_explained_var.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 1))
plot(cumsum(falchi_pcf$varprop), type = "b",
pch = 16, main = "fPCA varianza spiegata cumulata Gheppi")
plot(cumsum(gufi_pcf$varprop), type = "b",
pch = 16, main = "fPCA varianza spiegata cumulata Allocchi")
plot(cumsum(gabbiani_pcf$varprop), type = "b",
pch = 16, main = "fPCA varianza spiegata cumulata Gabbiani")
dev.off()
par(mfrow = c(1, 1))
# 3 components -> see mean +- eps*harmonic
falchi_pcf = pca.fd(falchi_meanspec_fd, nharm = 3)
gufi_pcf = pca.fd(gufi_meanspec_fd, nharm = 3)
gabbiani_pcf = pca.fd(gabbiani_meanspec_fd, nharm = 3)
png("results/prima_parte/images/f_pca_harmonics.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 3), mar = rep(0, 4) + 1)
plot(falchi_pcf)
plot(gufi_pcf)
plot(gabbiani_pcf)
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1))
dev.off()
# 2 components -> see scores
falchi_pcf = pca.fd(falchi_meanspec_fd, nharm = 2)
gufi_pcf = pca.fd(gufi_meanspec_fd, nharm = 2)
gabbiani_pcf = pca.fd(gabbiani_meanspec_fd, nharm = 2)
png("results/prima_parte/images/f_pca_scores.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 1))
plot(falchi_pcf$scores, type = "p", col = falchi$Climate_zone, pch = 16,
main = "fPCA punteggi Gheppi")
legend("topright", legend = levels(falchi$Climate_zone), col = 1:3, pch = 16,
bty = "n")
plot(gufi_pcf$scores, type = "p", col = gufi$Climate_zone, pch = 16,
main = "fPCA punteggi Allocchi")
legend("topright", legend = levels(gufi$Climate_zone), col = 1:3, pch = 16,
bty = "n")
plot(gabbiani_pcf$scores, type = "p", col = gabbiani$Cluster, pch = 16,
main = "fPCA punteggi Gabbiani")
legend("topright", legend = levels(gabbiani$Cluster), col = 1:4, pch = 16,
bty = "n")
par(mfrow = c(1, 1))
dev.off()
fANOVABetaSdPlot(my.betaestlist = falchi_anova_model$model$betaestlist,
my.betastderrlist = falchi_anova_model$beta_se$betastderrlist,
my.factor = falchi$Climate_zone,
my.name = "Gheppi",
save_path = "results/prima_parte/images/f_beta_falchi.png",
my.width = MY.WIDTH,
my.height = MY.HEIGHT,
my.layout.matr = cbind(matrix(1, 2, 2),
matrix(2:5, 2, 2)))
PlotBetaWithQuantiles(original_fit = boot_fanova_beta_falchi$original_fit_beta,
quantile_betas = boot_fanova_beta_falchi$quantile_betas,
my.name = "Gheppi",
save_path = "results/prima_parte/images/f_beta_quant_falchi.png",
my.width = MY.WIDTH,
my.height = MY.HEIGHT,
my.layout.matr = cbind(matrix(1, 2, 2),
matrix(2:5, 2, 2)))
fANOVABetaSdPlot(my.betaestlist = gufi_anova_model$model$betaestlist,
my.betastderrlist = gufi_anova_model$beta_se$betastderrlist,
my.factor = gufi$Climate_zone,
my.name = "Allocchi",
save_path = "results/prima_parte/images/f_beta_gufi.png",
my.width = MY.WIDTH,
my.height = MY.HEIGHT,
my.layout.matr = cbind(matrix(1, 2, 2),
matrix(2:5, 2, 2)))
PlotBetaWithQuantiles(original_fit = boot_fanova_beta_gufi$original_fit_beta,
quantile_betas = boot_fanova_beta_gufi$quantile_betas,
my.name = "Allocchi",
save_path = "results/prima_parte/images/f_beta_quant_gufi.png",
my.width = MY.WIDTH,
my.height = MY.HEIGHT,
my.layout.matr = cbind(matrix(1, 2, 2),
matrix(2:5, 2, 2)))
fANOVABetaSdPlot(my.betaestlist = gabbiani_anova_model$model$betaestlist,
my.betastderrlist = gabbiani_anova_model$beta_se$betastderrlist,
my.factor = gabbiani$Cluster,
my.name = "gabbiani",
save_path = "results/prima_parte/images/f_beta_gabbiani.png",
my.width = MY.WIDTH,
my.height = MY.HEIGHT,
my.layout.matr = cbind(matrix(1, 2, 2),
matrix(2:5, 2, 2)))
PlotBetaWithQuantiles(original_fit = boot_fanova_beta_gabbiani$original_fit_beta,
quantile_betas = boot_fanova_beta_gabbiani$quantile_betas,
my.name = "Gabbiani",
save_path = "results/prima_parte/images/f_beta_quant_gabbiani.png",
my.width = MY.WIDTH,
my.height = MY.HEIGHT,
my.layout.matr = cbind(matrix(1, 2, 2),
matrix(2:5, 2, 2)))
png("results/prima_parte/images/f_anova_cv_err.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 1))
plot(cv_fanova_res_falchi$lambda_grid,
cv_fanova_res_falchi$cv_error,
pch = 16, type = "b",
xlab = "lambda",
ylab = "err",
main = "Errore integrato di Cv - Gheppi")
plot(cv_fanova_res_gufi$lambda_grid,
cv_fanova_res_gufi$cv_error,
pch = 16, type = "b",
xlab = "lambda",
ylab = "err",
main = "Errore integrato di Cv - Allocchi")
plot(cv_fanova_res_gabbiani$lambda_grid,
cv_fanova_res_gabbiani$cv_error,
pch = 16, type = "b",
xlab = "lambda",
ylab = "err",
main = "Errore integrato di Cv - Gabbiani")
dev.off()
png("results/prima_parte/images/f_anova_f_test.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 1))
# falchi
plot(
falchi_meanspec_freqs,
perm_fanova_res_falchi$fobs,
ylim = range(c(perm_fanova_res_falchi$fobs,perm_fanova_res_falchi$qFmax)),
type = 'l',
lwd = 2,
main = paste0("Ftest Gheppi", "; permutation number = ", N_PERM),
xlab = "Frequency",
ylab = "F"
)
lines(falchi_meanspec_freqs, perm_fanova_res_falchi$qF,
lty = 3, lwd = 2)
abline(h = perm_fanova_res_falchi$qFmax, lwd = 2, col = 2)
# gufi
plot(
gufi_meanspec_freqs,
perm_fanova_res_gufi$fobs,
ylim = range(c(perm_fanova_res_gufi$fobs,perm_fanova_res_gufi$qFmax)),
type = 'l',
lwd = 2,
main = paste0("Ftest Allocchi", "; permutation number = ", N_PERM),
xlab = "Frequency",
ylab = "F"
)
lines(gufi_meanspec_freqs, perm_fanova_res_gufi$qF,
lty = 3, lwd = 2)
abline(h = perm_fanova_res_gufi$qFmax, lwd = 2, col = 2)
# gabbiani
plot(
gabbiani_meanspec_freqs,
perm_fanova_res_gabbiani$fobs,
type = 'l',
lwd = 2,
ylim = range(c(perm_fanova_res_gabbiani$fobs,perm_fanova_res_gabbiani$qFmax)),
main = paste0("Ftest Gabbiani", "; permutation number = ", N_PERM),
xlab = "Frequency",
ylab = "F"
)
lines(gabbiani_meanspec_freqs, perm_fanova_res_gabbiani$qF,
lty = 3, lwd = 2)
abline(h = perm_fanova_res_gabbiani$qFmax, lwd = 2, col = 2)
dev.off()
par(mfrow = c(1, 1))
# .. Save image ----------------------------
gc()
save.image(file = "results/prima_parte/outputs/final_work_space.RData")
library(gam)
?gam
library(dplyr)
library(urca)
library(vars)
library(dynlm)
library(dplyr)
library(urca)
library(vars)
library(dynlm)
setwd("C:/Users/pietr/OneDrive - Università degli Studi di Padova/UNI/Corsi/Magistrale/Secondo Anno/Primo semestre/Modelli statistici per dati economici/Esami/Soluzioni appello del 28 gennaio 2025 (I appello)-20250609")
library(readxl)
library(dplyr)
library(urca)
library(vars)
library(dynlm)
library(readxl)
my.df <- read_xlsx("dati_GDP.xlsx")
head(my.df)
my.df <- read_xlsx("dati_GDP.xlsx")
gdp.ts <- ts(my.df[,-1],
start = c(1995, 1), frequency = 4)
end(gdp.ts)
par(mfrow = c(3,1))
for(i in 1:NCOL(gdp.ts)){
plot(gdp.ts[,i], main = colnames(gdp.ts)[i])
}
par(mfrow = c(1,1))
par(mfrow = c(3,1))
for(i in 1:NCOL(gdp.ts)){
plot(ts(gdp.ts[,i]), main = colnames(gdp.ts)[i])
}
par(mfrow = c(1,1))
par(mfrow = c(3,1))
for(i in 1:NCOL(gdp.ts)){
plot(ts(gdp.ts[,i]), main = colnames(gdp.ts)[i])
}
par(mfrow = c(1,1))
par(mfrow = c(3,1))
for(i in 1:NCOL(gdp.ts)){
plot(ts(gdp.ts[,i]), main = colnames(gdp.ts)[i])
}
par(mfrow = c(3,1))
for(i in 1:NCOL(gdp.ts)){
plot(ts(gdp.ts[,i]), main = colnames(gdp.ts)[i])
}
par(mfrow = c(1,1))
par(mfrow = c(3,1))
for(i in 1:NCOL(gdp.ts)){
plot(ts(gdp.ts[,i]), main = colnames(gdp.ts)[i])
}
par(mfrow = c(1,1))
par(mfrow = c(3,1))
for(i in 1:NCOL(gdp.ts)){
plot(ts(gdp.ts[,i]), main = colnames(gdp.ts)[i])
}
par(mfrow = c(1,1))
?par
par(mfrow = c(3,1),
mar = c(1,1,1,1,1))
for(i in 1:NCOL(gdp.ts)){
plot(ts(gdp.ts[,i]), main = colnames(gdp.ts)[i])
}
par(mfrow = c(1,1))
par(mfrow = c(3,1),
mar = c(5,5,5,5,5))
for(i in 1:NCOL(gdp.ts)){
plot(ts(gdp.ts[,i]), main = colnames(gdp.ts)[i])
}
par(mfrow = c(1,1))
par(mfrow = c(3,1))
for(i in 1:NCOL(gdp.ts)){
plot(ts(gdp.ts[,i]), main = colnames(gdp.ts)[i])
}
par(mfrow = c(1,1))
