legend("topright",
legend = levels(my.levels.variable),
col = 1:length(unique(my.levels.variable)),
lwd = my.lwd,
bty = "n")
if(!is.null(save_path)){
dev.off()
}
}
fANOVABetaSdPlot = function(my.betaestlist,
my.betastderrlist,
my.factor,
my.name,
save_path = NULL,
my.width = 600,
my.height = 350,
my.layout.matr = cbind(matrix(1, 2, 2),
matrix(2:5, 2, 2))){
if(!is.null(save_path)){
png(save_path,
width = my.width,
height = my.height)
}
graphics::layout(mat = my.layout.matr)
plot(
my.betaestlist[[1]]$fd,
main = paste0(c(my.name, "Intercetta funzionale"), collapse = " - "),
ylim = c(0, 1)
) # mu(t)
lines(
my.betaestlist[[1]]$fd +
2 * my.betastderrlist[[1]],
lty = 3
)
lines(
my.betaestlist[[1]]$fd -
2 * my.betastderrlist[[1]],
lty = 3
)
sapply(
2:(length(levels(my.factor)) + 1),
function(x) {
plot(
my.betaestlist[[x]],
main = levels(my.factor)[x - 1],
ylim = c(-0.1, 0.1)
)
abline(h = 0, lty = 2)
lines(
my.betaestlist[[x]]$fd +
2 * my.betastderrlist[[x]],
lty = 3
)
lines(
my.betaestlist[[x]]$fd -
2 * my.betastderrlist[[x]],
lty = 3
)
} # alpha_j(t)
)
if(!is.null(save_path)){
dev.off()
}
par(mfrow = c(1, 1))
}
# if TRUE save RData, at the risk of override existing ones
DO_SAVE_RDATA = TRUE
# save Plotting
MY.WIDTH = 1500
MY.HEIGHT = 1000
# save Plotting
MY.WIDTH = 2000
MY.HEIGHT = 2000
# Changing basis number
n_basis_seq = seq(20, nrow(falchi_meanspec_amps) - 2)
NORDER = 4
rangeval_falchi <- range(falchi_meanspec_freqs)
falchi_nbasis_gcv <- GCV_IntegerSmoothBasis(
n_basis_seq = 20:(nrow(falchi_meanspec_amps) - 2),
basis_order = NORDER,
basis_rangeval = range(falchi_meanspec_freqs),
x_grid = falchi_meanspec_freqs,
response_matrix = falchi_meanspec_amps
)
plot(falchi_nbasis_gcv$n_basis_seq, falchi_nbasis_gcv$gcv_vals, type = "l")
# by eye 64 basis seem enough
falchi_basis_int = create.bspline.basis(
rangeval = range(falchi_meanspec_freqs),
norder = NORDER,
nbasis = falchi_nbasis_gcv$best_n_basis
)
falchi_meanspec_fd_int = smooth.basis(
falchi_meanspec_freqs,
falchi_meanspec_amps,
falchi_basis_int
)$fd
falchi_meanspec_fd_int$fdnames = list("frequency" = falchi_meanspec_freqs,
"reps" = rep("y", length(falchi_meanspec_fd_int$fdnames$reps)),
"values" = "Amplitude")
falchi_LD_gcv <- GCV_DifferentialSmoothBasis(
n_basis = nrow(falchi_meanspec_amps),
lambda_grid = 10^seq(-10, -5, length = 100),
basis_order = NORDER,
basis_rangeval = range(falchi_meanspec_freqs),
x_grid = falchi_meanspec_freqs,
response_matrix = falchi_meanspec_amps
)
plot(
log(falchi_LD_gcv$lambda_grid, base = 10),
falchi_LD_gcv$gcv_vals,
type = "l"
)
# compare gcv values
min(falchi_nbasis_gcv$gcv_vals)
min(falchi_LD_gcv$gcv_vals)
falchi_basis_max = create.bspline.basis(
rangeval = range(falchi_meanspec_freqs),
norder = NORDER,
nbasis = nrow(falchi_meanspec_amps)
)
falchi_fdPar = fdPar(
fdobj = falchi_basis_max,
Lfdobj = int2Lfd(2),
lambda = falchi_LD_gcv$best_lambda
)
falchi_basis_diff <- smooth.basis(
falchi_meanspec_freqs,
falchi_meanspec_amps,
falchi_fdPar
)
falchi_basis_diff$fd$fdnames = list("frequency" = falchi_meanspec_freqs,
"reps" = rep("y", length(falchi_basis_diff$fd$fdnames$reps)),
"values" = "Amplitude")
falchi_meanspec_fd_diff = falchi_basis_diff$fd
dim(gufi_meanspec_amps)
# Changing basis number
n_basis_seq = seq(20, nrow(gufi_meanspec_amps) - 2)
NORDER = 4
rangeval_gufi <- range(gufi_meanspec_freqs)
gufi_nbasis_gcv <- GCV_IntegerSmoothBasis(
n_basis_seq = 20:(nrow(gufi_meanspec_amps) - 2),
basis_order = NORDER,
basis_rangeval = range(gufi_meanspec_freqs),
x_grid = gufi_meanspec_freqs,
response_matrix = gufi_meanspec_amps
)
plot(gufi_nbasis_gcv$n_basis_seq, gufi_nbasis_gcv$gcv_vals, type = "l")
abline(v = gufi_nbasis_gcv$best_n_basis, col = "red")
# by eye 90 basis seem enough
gufi_basis_int = create.bspline.basis(
rangeval = range(gufi_meanspec_freqs),
norder = NORDER,
nbasis = gufi_nbasis_gcv$best_n_basis
) # too much variability
gufi_meanspec_fd_int = smooth.basis(
gufi_meanspec_freqs,
gufi_meanspec_amps,
gufi_basis_int
)$fd
gufi_meanspec_fd_int$fdnames = list("frequency" = gufi_meanspec_freqs,
"reps" = rep("y", length(gufi_meanspec_fd_int$fdnames$reps)),
"values" = "Amplitude")
gufi_LD_gcv <- GCV_DifferentialSmoothBasis(
n_basis = nrow(gufi_meanspec_amps),
lambda_grid = 10^seq(-10, -6, length = 100),
basis_order = NORDER,
basis_rangeval = range(gufi_meanspec_freqs),
x_grid = gufi_meanspec_freqs,
response_matrix = gufi_meanspec_amps
)
plot(log(gufi_LD_gcv$lambda_grid, base = 10), gufi_LD_gcv$gcv_vals, type = "l")
# compare gcv values
min(gufi_nbasis_gcv$gcv_vals) # much smaller
min(gufi_LD_gcv$gcv_vals)
gufi_basis_max = create.bspline.basis(
rangeval = range(gufi_meanspec_freqs),
norder = NORDER,
nbasis = nrow(gufi_meanspec_amps)
)
gufi_fdPar = fdPar(
fdobj = gufi_basis_max,
Lfdobj = int2Lfd(2),
lambda = gufi_LD_gcv$best_lambda
)
gufi_meanspec_fd_diff <- smooth.basis(
gufi_meanspec_freqs,
gufi_meanspec_amps,
gufi_fdPar
)$fd
gufi_meanspec_fd_diff$fdnames = list("frequency" = gufi_meanspec_freqs,
"reps" = rep("y", length(gufi_meanspec_fd_diff$fdnames$reps)),
"values" = "Amplitude")
# compare fitting
gufi_meanspec_fd = gufi_meanspec_fd_diff
dim(gabbiani_meanspec_amps)
n_basis_seq = seq(20, nrow(gabbiani_meanspec_amps) - 2)
NORDER = 4
rangeval_gabbiani <- range(gabbiani_meanspec_freqs)
gabbiani_nbasis_gcv <- GCV_IntegerSmoothBasis(
n_basis_seq = 20:(nrow(gabbiani_meanspec_amps) - 2),
basis_order = NORDER,
basis_rangeval = range(gabbiani_meanspec_freqs),
x_grid = gabbiani_meanspec_freqs,
response_matrix = gabbiani_meanspec_amps
)
plot(gabbiani_nbasis_gcv$n_basis_seq, gabbiani_nbasis_gcv$gcv_vals, type = "l")
# by eye 100 basis seem enough
gabbiani_basis_int = create.bspline.basis(
rangeval = range(gabbiani_meanspec_freqs),
norder = NORDER,
nbasis = gabbiani_nbasis_gcv$best_n_basis
)
gabbiani_meanspec_fd_int = smooth.basis(
gabbiani_meanspec_freqs,
gabbiani_meanspec_amps,
gabbiani_basis_int
)$fd
gabbiani_meanspec_fd_int$fdnames = list("frequency" = gabbiani_meanspec_freqs,
"reps" = rep("y", length(gabbiani_meanspec_fd_int$fdnames$reps)),
"values" = "Amplitude")
gabbiani_LD_gcv <- GCV_DifferentialSmoothBasis(
n_basis = (nrow(gabbiani_meanspec_amps)),
lambda_grid = 10^seq(-8, -6, length = 100),
basis_order = NORDER,
basis_rangeval = range(gabbiani_meanspec_freqs),
x_grid = gabbiani_meanspec_freqs,
response_matrix = gabbiani_meanspec_amps
)
plot(
log(gabbiani_LD_gcv$lambda_grid, base = 10),
gabbiani_LD_gcv$gcv_vals,
type = "l"
)
# compare gcv values
min(gabbiani_nbasis_gcv$gcv_vals)
min(gabbiani_LD_gcv$gcv_vals)
gabbiani_basis_max = create.bspline.basis(
rangeval = range(gabbiani_meanspec_freqs),
norder = NORDER,
nbasis = (nrow(gabbiani_meanspec_amps))
)
gabbiani_fdPar = fdPar(
fdobj = gabbiani_basis_max,
Lfdobj = int2Lfd(2),
lambda = gabbiani_LD_gcv$best_lambda
)
gabbiani_meanspec_fd_diff <- smooth.basis(
gabbiani_meanspec_freqs,
gabbiani_meanspec_amps,
gabbiani_fdPar
)$fd
gabbiani_meanspec_fd_diff$fdnames = list("frequency" = gabbiani_meanspec_freqs,
"reps" = rep("y", length(gabbiani_meanspec_fd_diff$fdnames$reps)),
"values" = "Amplitude")
falchi_loocv_pen_int = LOOCVConstraintSplinesInt(x_grid = falchi_meanspec_freqs,
y_matrix = falchi_meanspec_amps,
basis_num_seq = 20:50,
box_constraints = c(0,1))
falchi_loocv_pen_diff = LOOCVConstraintSplinesDiff(x_grid = falchi_meanspec_freqs,
y_matrix = falchi_meanspec_amps,
basis_num = 110,
lambda_grid = 10^(seq(-6, -3, length = 20)),
box_constraints = c(0,1))
falchi_meanspec_fd_con_int = ToFdConstraintSplinesInt(x_grid = falchi_meanspec_freqs,
y_matrix = falchi_meanspec_amps,
basis_num = falchi_loocv_pen_int$basis_min)
falchi_meanspec_fd_con_diff = ToFdConstraintSplinesDiff(x_grid = falchi_meanspec_freqs,
y_matrix = falchi_meanspec_amps,
basis_num = falchi_loocv_pen_diff$basis_num,
my.lambda = falchi_loocv_pen_diff$lambda_min)
falchi_meanspec_fd = falchi_meanspec_fd_con_diff
par(mfrow = c(1,2))
plot(falchi_loocv_pen_int$basis_num_seq,
falchi_loocv_pen_int$loocv_err, type = "b", pch = 16,
xlab = "n basis",
ylab = "LOOCV error")
plot(log(falchi_loocv_pen_diff$lambda_grid, base = 10),
falchi_loocv_pen_diff$loocv_err, type = "b", pch = 16,
xlab = "log(lambda, base = 10)",
ylab = "LOOCV error")
par(mfrow = c(1,1))
gufi_loocv_pen_int = LOOCVConstraintSplinesInt(x_grid = gufi_meanspec_freqs,
y_matrix = gufi_meanspec_amps,
basis_num_seq = 20:50,
box_constraints = c(0,1))
gufi_loocv_pen_diff = LOOCVConstraintSplinesDiff(x_grid = gufi_meanspec_freqs,
y_matrix = gufi_meanspec_amps,
basis_num = 110,
lambda_grid = 10^(seq(-10, -3, length = 20)),
box_constraints = c(0,1))
gufi_meanspec_fd_con_int = ToFdConstraintSplinesInt(x_grid = gufi_meanspec_freqs,
y_matrix = gufi_meanspec_amps,
basis_num = gufi_loocv_pen_int$basis_min)
gufi_meanspec_fd_con_diff = ToFdConstraintSplinesDiff(x_grid = gufi_meanspec_freqs,
y_matrix = gufi_meanspec_amps,
basis_num = gufi_loocv_pen_diff$basis_num,
my.lambda = gufi_loocv_pen_diff$lambda_min)
gufi_meanspec_fd = gufi_meanspec_fd_con_diff
par(mfrow = c(1,2))
plot(gufi_loocv_pen_int$basis_num_seq,
gufi_loocv_pen_int$loocv_err, type = "b", pch = 16,
xlab = "n basis",
ylab = "LOOCV error")
plot(log(gufi_loocv_pen_diff$lambda_grid, base = 10),
gufi_loocv_pen_diff$loocv_err, type = "b", pch = 16,
xlab = "log(lambda, base = 10)",
ylab = "LOOCV error")
par(mfrow = c(1,1))
gabbiani_loocv_pen_int = LOOCVConstraintSplinesInt(x_grid = gabbiani_meanspec_freqs,
y_matrix = gabbiani_meanspec_amps,
basis_num_seq = 20:50,
box_constraints = c(0,1))
gabbiani_loocv_pen_diff = LOOCVConstraintSplinesDiff(x_grid = gabbiani_meanspec_freqs,
y_matrix = gabbiani_meanspec_amps,
basis_num = 110,
lambda_grid = 10^(seq(-10, -3, length = 20)),
box_constraints = c(0,1))
gabbiani_meanspec_fd_con_int = ToFdConstraintSplinesInt(x_grid = gabbiani_meanspec_freqs,
y_matrix = gabbiani_meanspec_amps,
basis_num = gabbiani_loocv_pen_int$basis_min)
gabbiani_meanspec_fd_con_diff = ToFdConstraintSplinesDiff(x_grid = gabbiani_meanspec_freqs,
y_matrix = gabbiani_meanspec_amps,
basis_num = gabbiani_loocv_pen_diff$basis_num,
my.lambda = gabbiani_loocv_pen_diff$lambda_min)
gabbiani_meanspec_fd = gabbiani_meanspec_fd_con_diff
par(mfrow = c(1,2))
plot(gabbiani_loocv_pen_int$basis_num_seq,
gabbiani_loocv_pen_int$loocv_err, type = "b", pch = 16,
xlab = "n basis",
ylab = "LOOCV error")
plot(log(gabbiani_loocv_pen_diff$lambda_grid, base = 10),
gabbiani_loocv_pen_diff$loocv_err, type = "b", pch = 16,
xlab = "log(lambda, base = 10)",
ylab = "LOOCV error")
par(mfrow = c(1,1))
representation_selection_df = data.frame("animal" = c(rep("falchi", 4), rep("gufi", 4), rep("gabbiani", 4)),
"constraint" = rep(c(FALSE, FALSE, TRUE, TRUE), 3) ,
"penalty type" = rep(c("INT", "DIFF", "INT", "DIFF"), 3) ,
"min error parameter" = c(falchi_nbasis_gcv$best_n_basis,
falchi_LD_gcv$best_lambda,
falchi_loocv_pen_int$basis_min,
falchi_loocv_pen_diff$lambda_min,
gufi_nbasis_gcv$best_n_basis,
gufi_LD_gcv$best_lambda,
gufi_loocv_pen_int$basis_min,
gufi_loocv_pen_diff$lambda_min,
gabbiani_nbasis_gcv$best_n_basis,
gabbiani_LD_gcv$best_lambda,
gabbiani_loocv_pen_int$basis_min,
gabbiani_loocv_pen_diff$lambda_min),
"domain unique points" = c(rep(nrow(falchi_meanspec_amps), 4),
rep(nrow(gufi_meanspec_amps), 4),
rep(nrow(gabbiani_meanspec_amps), 4)))
representation_selection_df
save(representation_selection_df,
file = "results/prima_parte/outputs/representation_selection_df.RData")
png("results/prima_parte/images/falchi_fits_crit.png",
width = MY.WIDTH, height = MY.HEIGHT)
# compare fitting
par(mfrow = c(2, 2))
plot(falchi_meanspec_fd_int, main = paste0("Falchi GCV Int - nbasis: ",
falchi_meanspec_fd_int$basis$nbasis, collapse = "")) # border problem
plot(falchi_meanspec_fd_diff, main = paste0("Falchi GCV Diff - log(lambda): ",
round(log(falchi_LD_gcv$best_lambda, base = 10),2), collapse = "")) # choose this one
plot(falchi_meanspec_fd_con_int,
main = paste0("Falchi Constraint LOOCV Int - nbasis: ",
falchi_loocv_pen_int$basis_min, collapse = ""))
plot(falchi_meanspec_fd_con_diff,
main = paste0("Falchi Constraint LOOCV Diff - log(lambda): ",
round(log(falchi_loocv_pen_diff$lambda_min, base = 10),2), collapse = ""))
par(mfrow = c(1,1))
dev.off()
png("results/prima_parte/images/gufi_fits_crit.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(2, 2))
plot(gufi_meanspec_fd_int, main = paste0("Gufi GCV Int - nbasis: ",
gufi_meanspec_fd_int$basis$nbasis, collapse = "")) # border problem
plot(gufi_meanspec_fd_diff, main = paste0("Gufi GCV Diff - log(lambda): ",
round(log(gufi_LD_gcv$best_lambda, base = 10),2), collapse = "")) # choose this one
plot(gufi_meanspec_fd_con_int,
main = paste0("Gufi Constraint LOOCV Int - nbasis: ",
gufi_loocv_pen_int$basis_min, collapse = ""))
plot(gufi_meanspec_fd_con_diff,
main = paste0("Gufi Constraint LOOCV Diff - log(lambda): ",
round(log(gufi_loocv_pen_diff$lambda_min, base = 10),2), collapse = ""))
par(mfrow = c(1,1))
dev.off()
png("results/prima_parte/images/gabbiani_fits_crit.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(2, 2))
plot(gabbiani_meanspec_fd_int, main = paste0("Gabbiani GCV Int - nbasis: ",
gabbiani_meanspec_fd_int$basis$nbasis, collapse = "")) # border problem
plot(gabbiani_meanspec_fd_diff, main = paste0("Gabbiani GCV Diff - log(lambda): ",
round(log(gabbiani_LD_gcv$best_lambda, base = 10),2), collapse = "")) # choose this one
plot(gabbiani_meanspec_fd_con_int,
main = paste0("Gabbiani Constraint LOOCV Int - nbasis: ",
gabbiani_loocv_pen_int$basis_min, collapse = ""))
plot(gabbiani_meanspec_fd_con_diff,
main = paste0("Gabbiani Constraint LOOCV Diff - log(lambda): ",
round(log(gabbiani_loocv_pen_diff$lambda_min, base = 10),2), collapse = ""))
par(mfrow = c(1,1))
dev.off()
falchi_meanspec_fd_mean = lapply(
levels(falchi$Climate_zone),
function(i) mean.fd(falchi_meanspec_fd[falchi$Climate_zone == i])
)
falchi_meanspec_fd_sd = lapply(
levels(falchi$Climate_zone),
function(i) sd.fd(falchi_meanspec_fd[falchi$Climate_zone == i])
)
gufi_meanspec_fd_mean = lapply(
levels(gufi$Climate_zone),
function(i) mean.fd(gufi_meanspec_fd[gufi$Climate_zone == i])
)
gufi_meanspec_fd_sd = lapply(
levels(gufi$Climate_zone),
function(i) sd.fd(gufi_meanspec_fd[gufi$Climate_zone == i])
)
gabbiani_meanspec_fd_mean = lapply(
levels(gabbiani$Cluster),
function(i) mean.fd(gabbiani_meanspec_fd[gabbiani$Cluster == i])
)
gabbiani_meanspec_fd_sd = lapply(
levels(gabbiani$Cluster),
function(i) sd.fd(gabbiani_meanspec_fd[gabbiani$Cluster == i])
)
png("results/prima_parte/images/f_mean_sd.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(1,3))
FunctionalMeanBandPlot(fd_means = falchi_meanspec_fd_mean,
fd_sds = falchi_meanspec_fd_sd,
my.main = "Medie Funzionali ± Sd Falchi",
my.ylim = c(0,0.8),
my.lwd = 2,
my.xlab = "Frequenza",
my.ylab = "Ampiezza",
my.levels.variable = falchi$Climate_zone,
save_path = NULL,
my.width = 600,
my.height = 350)
FunctionalMeanBandPlot(fd_means = gufi_meanspec_fd_mean,
fd_sds = gufi_meanspec_fd_sd,
my.main = "Medie Funzionali ± Sd Gufi",
my.ylim = c(0,1),
my.lwd = 2,
my.xlab = "Frequenza",
my.ylab = "Ampiezza",
my.levels.variable = gufi$Climate_zone,
save_path = NULL,
my.width = 600,
my.height = 350)
FunctionalMeanBandPlot(fd_means = gabbiani_meanspec_fd_mean,
fd_sds = gabbiani_meanspec_fd_sd,
my.main = "Medie Funzionali ± Sd Gabbiani",
my.ylim = c(0,1),
my.lwd = 2,
my.xlab = "Frequenza",
my.ylab = "Ampiezza",
my.levels.variable = gabbiani$Cluster,
save_path = NULL,
my.width = 600,
my.height = 350)
par(mfrow = c(1,1))
dev.off()
# 10 components
falchi_pcf = pca.fd(falchi_meanspec_fd, nharm = 10)
gufi_pcf = pca.fd(gufi_meanspec_fd, nharm = 10)
gabbiani_pcf = pca.fd(gabbiani_meanspec_fd, nharm = 10)
png("results/prima_parte/images/f_pca_explained_var.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 1))
plot(cumsum(falchi_pcf$varprop), type = "b",
pch = 16, main = "fPCA varianza spiegata cumulata Falchi")
plot(cumsum(gufi_pcf$varprop), type = "b",
pch = 16, main = "fPCA varianza spiegata cumulata Gufi")
plot(cumsum(gabbiani_pcf$varprop), type = "b",
pch = 16, main = "fPCA varianza spiegata cumulata Gabbiani")
dev.off()
par(mfrow = c(1, 1))
# 3 components -> see mean +- eps*harmonic
falchi_pcf = pca.fd(falchi_meanspec_fd, nharm = 3)
gufi_pcf = pca.fd(gufi_meanspec_fd, nharm = 3)
gabbiani_pcf = pca.fd(gabbiani_meanspec_fd, nharm = 3)
png("results/prima_parte/images/f_pca_harmonics.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 3), mar = rep(0, 4) + 1)
plot(falchi_pcf)
plot(gufi_pcf)
plot(gabbiani_pcf)
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1))
dev.off()
# 2 components -> see scores
falchi_pcf = pca.fd(falchi_meanspec_fd, nharm = 2)
gufi_pcf = pca.fd(gufi_meanspec_fd, nharm = 2)
gabbiani_pcf = pca.fd(gabbiani_meanspec_fd, nharm = 2)
png("results/prima_parte/images/f_pca_scores.png",
width = MY.WIDTH, height = MY.HEIGHT)
par(mfrow = c(3, 1))
plot(falchi_pcf$scores, type = "p", col = falchi$Climate_zone, pch = 16,
main = "fPCA punteggi Falchi")
legend("topright", legend = levels(falchi$Climate_zone), col = 1:3, pch = 16,
bty = "n")
plot(gufi_pcf$scores, type = "p", col = gufi$Climate_zone, pch = 16,
main = "fPCA punteggi Gufi")
legend("topright", legend = levels(gufi$Climate_zone), col = 1:3, pch = 16,
bty = "n")
plot(gabbiani_pcf$scores, type = "p", col = gabbiani$Cluster, pch = 16,
main = "fPCA punteggi Gabbiani")
legend("topright", legend = levels(gabbiani$Cluster), col = 1:4, pch = 16,
bty = "n")
par(mfrow = c(1, 1))
dev.off()
